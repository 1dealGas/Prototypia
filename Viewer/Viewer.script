-- Prototypia Viewer Main Logics
-- Copyright(c) 2024- 1dealGas, under the MIT License.

--[[
Our Workflow:
	Viewer
		-- Status
			-- Audio
			-- Chart[Fumen] Context
			-- File Listening Params
		-- GUI
	Python Part
]]--


-- Hash & String Caches
--
local hash = hash
local disable, enable, touch = hash("disable"), hash("enable"), hash("touch")
local tint_w, tint = hash("tint.w"), hash("tint")
local Sprite = hash("Sprite")

local msfmt = "[MS] %d Â· %d"
local titlefmt = "[%d]  Prototypia Viewer  --  %s  --  %d Hints"
local modification = "modification"

local BUTTON_P, BUTTON_SP = hash("BUTTON_P"), hash("BUTTON_SP")
local SCROLL_UP, BUTTON_UP = hash("SCROLL_UP"), hash("BUTTON_UP")
local SCROLL_DOWN, BUTTON_DOWN = hash("SCROLL_DOWN"), hash("BUTTON_DOWN")
local BUTTON_C = hash("BUTTON_C")

local GUPDATE, SHOW_PAUSE, SHOW_PLAY = hash("GUPDATE"), hash("SHOW_PAUSE"), hash("SHOW_PLAY")
local GUI_LOAD, GUI_SEEK, GUI_PLAY, GUI_OWV = hash("GUI_LOAD"), hash("GUI_SEEK"), hash("GUI_PLAY"), hash("GUI_OWV")


-- Function Caches
-- Only functions used in a for loop, or the Update callback will be cached.
--
local InitArf = Arf2.InitArf
local UpdateArf = Arf2.UpdateArf
local FinalArf = Arf2.FinalArf

local msg_url = msg.url
local msg_post = msg.post
local collectgarbage = collectgarbage
local defos_set_window_title = defos.set_window_title
local lfs_attributes = lfs.attributes
local string_format = string.format
local go_set = go.set   -- Set tint / tint.w



-- Environment
--
local CreateWish, CreateHint, CreateAnim, ViewerGUI
local Path, OpenWorksVolume = sys.get_save_file("Prototypia Viewer", "")
if sys.get_sys_info().system_name == "Darwin" then
	OpenWorksVolume = function()
		os.execute( "open " .. string.gsub(Path, "%s", "\\ ") )
	end
else
	OpenWorksVolume = function()
		os.execute("explorer " .. Path)
	end
end


-- Chart[Fumen] Context
--
local context_opened
local wtint, htint, atint   -- Tables of tint datas
local wgos, hgos, agos_l, agos_r   -- Tables of Game Objects' URLs
local w_sprites, h_sprites, al_sprites, ar_sprites   -- Tables of Sprite Components' URLs
local last_wu, last_hu, last_au = 0, 0, 0   -- Used to send "enable" and "disable" messages
local hint_count = 0
local wu_max = 0   -- A Chart[Fumen] Param that needs to be acquired at the runtime

local function EndContext()
	-- Release Game Objects
	--
	local go_delete = go.delete
	for i = 1, #wgos do go_delete(wgos[i]) end
	for i = 1, #hgos do
		go_delete(hgos[i])
		go_delete(agos_l[i])
		go_delete(agos_r[i])
	end

	-- Reset Variables
	--
	wtint, htint, atint = nil, nil, nil
	wgos, hgos, agos_l, agos_r = nil, nil, nil, nil
	w_sprites, h_sprites, al_sprites, ar_sprites = nil, nil, nil, nil
	last_wu, last_hu, last_au = 0, 0, 0
	hint_count = 0
	wu_max = 0

	-- Clean Up
	--
	collectgarbage()
	context_opened = false
	FinalArf()
end

local function NewContext(buf)
	local b, t, w, h = InitArf(buf, true)

	-- Context Creation
	--
	if b then
		-- Cache Functions Here to avoid upvalues exceed
		--
		local NewTable = Arf2.NewTable
		local factory_create = factory.create
		local vmath_vector4 = vmath.vector4
		
		-- Create Tables
		--
		wgos, hgos, agos_l, agos_r = NewTable(w, 0), NewTable(h, 0), NewTable(h, 0), NewTable(h, 0)
		w_sprites, h_sprites, al_sprites, ar_sprites = NewTable(w, 0), NewTable(h, 0), NewTable(h, 0), NewTable(h, 0)
		wtint, htint, atint = NewTable(w, 0), NewTable(h, 0), NewTable(h, 0)
		
		-- Fill Tables
		--
		for i = 1, w do
			local W = factory_create(CreateWish)
			wgos[i], w_sprites[i] = W, msg_url(Ar, W, Sprite)
			msg_post(W, disable)
		end

		for i = 1, h do
			local H = factory_create(CreateHint)
			hgos[i], h_sprites[i] = H, msg_url(Ar, H, Sprite)
			msg_post(H, disable)

			local AL = factory_create(CreateAnim)
			agos_l[i], al_sprites[i] = AL, msg_url(Ar, AL, Sprite)
			msg_post(AL, disable)
			
			local AR = factory_create(CreateAnim)
			agos_r[i], ar_sprites[i] = AR, msg_url(Ar, AR, Sprite)
			msg_post(AR, disable)

			htint[i] = vmath_vector4(0,0,0,1)
			atint[i] = vmath_vector4(0,0,0,1)
		end
		
		-- Clean Up
		--
		hint_count = t
		context_opened = true
		collectgarbage()
		return true
	else
		return false
	end
end

local function UpdateContext(mstime)
	if context_opened then
		local hl, wu, hu, au = UpdateArf(mstime, wgos, hgos, agos_l, agos_r, wtint, htint, atint)
		if hl then
			-- Mutate tint
			--
			for i = 1, wu do go_set(w_sprites[i], tint_w, wtint[i]) end
			for i = 1, hu do go_set(h_sprites[i], tint, htint[i]) end
			for i = 1, au do
				go_set(al_sprites[i], tint, atint[i])
				go_set(ar_sprites[i], tint, atint[i])
			end

			-- Enables & Disables
			--
			if wu > last_wu then
				if wu > wu_max then wu_max = wu end
				for i = last_wu+1, wu do
					local wsi = w_sprites[i]
					if wsi then msg_post(wsi, enable) end
				end
			elseif wu < last_wu then
				for i = wu+1, last_wu do
					local wsi = w_sprites[i]
					if wsi then msg_post(wsi, disable) end
				end
			end

			if hu > last_hu then
				for i = last_hu+1, hu do
					local hsi = h_sprites[i]
					if hsi then msg_post(hsi, enable) end
				end
			elseif hu < last_hu then
				for i = hu+1, last_hu do
					local hsi = h_sprites[i]
					if hsi then msg_post(hsi, disable) end
				end
			end

			if au > last_au then
				for i = last_au+1, au do
					local asli = al_sprites[i]
					if asli then
						msg_post(asli, enable)
						msg_post(ar_sprites[i], enable)
					end
				end
			elseif au < last_au then
				for i = au+1, last_au do
					local asli = al_sprites[i]
					if asli then
						msg_post(asli, disable)
						msg_post(ar_sprites[i], disable)
					end
				end
			end

			-- Update Caches
			--
			last_wu, last_hu, last_au = wu, hu, au
		end
	end
end



-- Status & Script Callbacks
-- Audio source must be "Single 16-bit PCM" format
-- AudioLen is a ms value
--
local FumenModification = 0   -- Reset it to 0 when loading a new Chart[Fumen]
local Audio, AudioLen, FumenPath   -- Nullify them when exception happens

function init(self)
	-- Initial Settings
	--
	defos.set_window_size(nil, nil, 1200, 720)
	defos_set_window_title( "Prototypia Viewer  --  " .. Path )
	msg_post(".", "acquire_input_focus")
	openal.set_distance_model("none")
	collectgarbage("stop")

	-- URL Preparations
	--
	local p, v = hash("Prototypia"), hash("/Viewer")
	CreateWish = msg_url( p, v, hash("CreateWish") )
	CreateHint = msg_url( p, v, hash("CreateHint") )
	CreateAnim = msg_url( p, v, hash("CreateAnim") )
	ViewerGUI = msg_url( p, v, hash("UI") )

	-- Write Licenses
	--
	local licensefile = io.open( Path .. "LICENSE", "w" )
	licensefile:write( sys.load_resource("/LICENSE") )
	licensefile:close()
	license = nil
end

local last_ms = 0   -- No need to clear this manually
function update(self, dt)
	if Audio and context_opened then
		local ms = Audio.time * 1000   -- There will be an offset value added
		ms = ( ms > 0 ) and ms or 0
		ms = ( ms < (AudioLen-10) ) and ms or AudioLen-10

		if ms ~= last_ms then
			UpdateContext(ms)
			msg_post( ViewerGUI, GUPDATE, {string_format(msfmt, ms, AudioLen)} )
			defos_set_window_title( string_format(titlefmt, wu_max, FumenPath, hint_count) )
			last_ms = ms
		end
	end
end

function fixed_update(self, dt)   -- File listening & GC
	if FumenPath then
		local mdf = lfs_attributes(FumenPath, modification)
		if mdf then   -- mdf == nil when the *.ar file is deleted
			if mdf ~= FumenModification then
				local _, buf = pcall(sys.load_buffer, FumenPath)
				if buf then
					if context_opened then EndContext() else FinalArf() end
					local _, ok = pcall(NewContext, buf)
					if ok then
						UpdateContext(last_ms)
						defos_set_window_title( string_format(titlefmt, wu_max, FumenPath, hint_count) )
						FumenModification = mdf
					else
						msg_post( ViewerGUI, GUPDATE, {"[!] Fatal error happened when syncing the chart[fumen]"} )
						if context_opened then EndContext() else FinalArf() end
						openal.remove_source(Audio)
						Audio, AudioLen = nil, 0
						FumenModification = 0
						FumenPath = nil
					end
				else
					msg_post( ViewerGUI, GUPDATE, {"[*] File syncing failed"} )
					FumenModification = mdf
				end
			end
		end
	end

	if Audio and Audio.state ~= "playing" then msg_post(ViewerGUI, SHOW_PLAY) end
	collectgarbage()
end


local msg_functions = {
	[GUI_LOAD] = function(self, message)   -- message -> {basename_str}
		-- Free the Previous Stuff
		--
		if Audio then
			openal.remove_source(Audio)
			Audio = nil
		end

		FumenPath = nil
		AudioLen, FumenModification = 0, 0
		if context_opened then EndContext() else FinalArf() end
		
		-- Load Audio & Trial Play
		--
		local wav_path = sys.get_save_file("Prototypia Viewer", message[1] .. ".wav")
		local attr = lfs_attributes(wav_path)
		if attr and attr.size > 4 then
			local _, audiobuf = pcall(sys.load_buffer, wav_path)
			if audiobuf then
				local _, ab, al = pcall(openal.new_source, audiobuf)
				if ab then
					--
					-- Trial Playing
					--
					local testpos = (al>1) and al-1 or al
					ab.time = testpos
					ab:play()
					ab:pause()
					if ab.state == "initial" or ab.time == 0 then
						msg_post( ViewerGUI, GUPDATE, {string_format("[!] You need to convert \"%s.wav\" into \"Single 16-bit PCM\" format to load it", message[1])} )
						openal.remove_source(ab)
					else
						ab:rewind()
						Audio, AudioLen = ab, al*1000
					end
				else
					msg_post( ViewerGUI, GUPDATE, {string_format("[!] You need to convert \"%s.wav\" into \"Single 16-bit PCM\" format to load it", message[1])} )
				end
			else
				msg_post( ViewerGUI, GUPDATE, {string_format("[!] Failed to load \"%s.wav\"", message[1])} )
			end
		elseif decodeogg then
			--
			-- (Windows Only) The Viewer could decode an *.ogg file into a WAV resource.
			--
			local ogg_path = sys.get_save_file("Prototypia Viewer", message[1] .. ".ogg")
			local ogg_attr = lfs_attributes(ogg_path)
			if ogg_attr then
				local _, audiobuf = pcall(sys.load_buffer, ogg_path)
				if audiobuf then
					local decoded = pcall(decodeogg.decodeogg, audiobuf)
					if decoded then
						local _, ab, al = pcall(openal.new_source, audiobuf)
						if ab then
							--
							-- Trial Playing
							--
							local testpos = (al>1) and al-1 or al
							ab.time = testpos
							ab:play()
							ab:pause()
							if ab.state == "initial" or ab.time == 0 then
								msg_post( ViewerGUI, GUPDATE, {string_format("[!] Trial Playing of \"%s.ogg\" failed", message[1])} )
								openal.remove_source(ab)
							else
								ab:rewind()
								Audio, AudioLen = ab, al*1000
							end
						else
							msg_post( ViewerGUI, GUPDATE, {string_format("[!] Failed to decode \"%s.ogg\"", message[1])} )
						end
					else
						msg_post( ViewerGUI, GUPDATE, {string_format("[!] Failed to decode \"%s.ogg\"", message[1])} )
					end
				else
					msg_post( ViewerGUI, GUPDATE, {string_format("[!] Failed to load \"%s.ogg\"", message[1])} )
				end
			else
				msg_post( ViewerGUI, GUPDATE, {string_format("[!] Both of file \"%s.wav\" and \"%s.ogg\" don't exist", message[1], message[1])} )
			end
		else
			msg_post( ViewerGUI, GUPDATE, {string_format("[!] File \"%s.wav\" doesn't exist, or smaller than 4KB", message[1])} )
		end

		-- Load Context
		--
		if Audio then
			local context_path = sys.get_save_file("Prototypia Viewer", message[1] .. ".ar")
			local context_attr = lfs_attributes(context_path)
			if context_attr then
				local _, fmbuf = pcall(sys.load_buffer, context_path)
				if fmbuf then
					local _, ok = pcall(NewContext, fmbuf)
					if ok then
						--
						-- File Listening Set Here
						--
						FumenPath = context_path
						FumenModification = context_attr.modification
					else
						msg_post( ViewerGUI, GUPDATE, {string_format("[!] Failed to parse \"%s.ar\"", message[1])} )
						if context_opened then EndContext() else FinalArf() end
						openal.remove_source(Audio)
						Audio, AudioLen = nil, 0
					end
				else
					msg_post( ViewerGUI, GUPDATE, {string_format("[!] Failed to load \"%s.ar\"", message[1])} )
					openal.remove_source(Audio)
					Audio, AudioLen = nil, 0
				end
			else
				msg_post( ViewerGUI, GUPDATE, {string_format("[!] File \"%s.ar\" doesn't exist", message[1])} )
				openal.remove_source(Audio)
				Audio, AudioLen = nil, 0
			end
		end

		-- Initial Update
		--
		if context_opened then
			UpdateContext(0)
			msg_post( ViewerGUI, GUPDATE, {string_format(msfmt, 0, AudioLen)} )
			defos_set_window_title( string_format(titlefmt, wu_max, FumenPath, hint_count) )
			last_ms = 0
		else
			defos_set_window_title( "Prototypia Viewer  --  " .. Path )
		end

		collectgarbage()
	end,

	[GUI_SEEK] = function(self, message)   -- message -> {mstime_str}
		if Audio and Audio.state ~= "playing" then
			local _, t = pcall(tonumber, message[1])
			if t then
				t = ( t < (AudioLen-10) ) and t or (AudioLen-10)
				t = ( t > 0 ) and t or 0
				Audio:play()
				Audio.time = t/1000   -- mstime -> time_in_sec
				Audio:pause()
			else
				msg_post( ViewerGUI, GUPDATE, {"[*] Mstime input invalid"} )
			end
		else
			msg_post( ViewerGUI, GUPDATE, {"[*] Before seeking somewhere, you need to load a chart[fumen]"} )
		end
	end,

	[GUI_PLAY] = function()
		if Audio then
			if Audio.state == "playing" then
				Audio:pause()
				msg_post(ViewerGUI, SHOW_PLAY)
			else
				Audio:play()
				if Audio.state ~= "playing" then
					msg_post(ViewerGUI, SHOW_PLAY)
				else
					msg_post(ViewerGUI, SHOW_PAUSE)
				end
			end
		else
			msg_post( ViewerGUI, GUPDATE, {"[*] Before playing, you need to load a chart[fumen]"} )
		end
	end,

	[GUI_OWV] = OpenWorksVolume
}
function on_message(self, message_id, message)
	if msg_functions[message_id] then
		msg_functions[message_id](self, message)
	end
end


local sp_init = nil
local ctrl_pressed = false   -- No need to clear this manually
local input_functions = {
	[BUTTON_P] = function(self, action)
		if ctrl_pressed and action.pressed then
			if Audio then
				if Audio.state == "playing" then
					Audio:pause()
					msg_post(ViewerGUI, SHOW_PLAY)
				else
					Audio:play()
					if Audio.state ~= "playing" then
						msg_post(ViewerGUI, SHOW_PLAY)
					else
						msg_post(ViewerGUI, SHOW_PAUSE)
					end
				end
			end
		end
	end,

	[BUTTON_SP] = function(self, action)
		if action.released then
			if Audio and sp_init then
				Audio:play()
				msg_post(ViewerGUI, SHOW_PLAY)
				Audio.time = sp_init
				Audio:pause()
			end
			sp_init = nil
		elseif ctrl_pressed and action.pressed then
			if Audio and Audio.state ~= "playing" then
				sp_init = Audio.time
				Audio:play()
				if Audio.state ~= "playing" then
					sp_init = nil
					msg_post(ViewerGUI, SHOW_PLAY)
				else
					msg_post(ViewerGUI, SHOW_PAUSE)
				end
			end
		end
	end,

	[SCROLL_UP] = function(self, action)
		if action.value == 1 then
			if Audio and Audio.state ~= "playing" then
				-- Time test
				--
				local t = ctrl_pressed and (Audio.time - 0.37) or (Audio.time - 0.037)
				t = ( t > 0 ) and t or 0
				t = ( t < (AudioLen - 0.01) ) and t or (AudioLen - 0.01)

				-- Time reset
				--
				Audio:play()
				Audio.time = t
				Audio:pause()
			end
		end
	end,

	[BUTTON_UP] = function(self, action)
		if action.pressed or action.repeated then
			if Audio and Audio.state ~= "playing" then
				-- Time test
				--
				local t = ctrl_pressed and (Audio.time - 0.37) or (Audio.time - 0.037)
				t = ( t > 0 ) and t or 0
				t = ( t < (AudioLen - 0.01) ) and t or (AudioLen - 0.01)

				-- Time reset
				--
				Audio:play()
				Audio.time = t
				Audio:pause()
			end
		end
	end,

	[SCROLL_DOWN] = function(self, action)
		if action.value == 1 then
			if Audio and Audio.state ~= "playing" then
				-- Time test
				--
				local t = ctrl_pressed and (Audio.time + 0.37) or (Audio.time + 0.037)
				t = ( t > 0 ) and t or 0
				t = ( t < (AudioLen - 0.01) ) and t or (AudioLen - 0.01)

				-- Time reset
				--
				Audio:play()
				Audio.time = t
				Audio:pause()
			end
		end
	end,

	[BUTTON_DOWN] = function(self, action)
		if action.pressed or action.repeated then
			if Audio and Audio.state ~= "playing" then
				-- Time test
				--
				local t = ctrl_pressed and (Audio.time + 0.37) or (Audio.time + 0.037)
				t = ( t > 0 ) and t or 0
				t = ( t < (AudioLen - 0.01) ) and t or (AudioLen - 0.01)

				-- Time reset
				--
				Audio:play()
				Audio.time = t
				Audio:pause()
			end
		end
	end,

	[BUTTON_C] = function(self, action)
		if action.released then ctrl_pressed = false
		elseif action.pressed then ctrl_pressed = true
		end
	end
}
function on_input(self, action_id, action)
	if action_id and input_functions[action_id] then
		input_functions[action_id](self, action)
	elseif action_id == touch and action.released then
		if context_opened then
			msg_post( ViewerGUI, GUPDATE, {string_format(msfmt, last_ms, AudioLen)} )
		else
			msg_post( ViewerGUI, GUPDATE, {"[MS] 0 Â· 0"} )
		end
	end
end