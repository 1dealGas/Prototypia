-- Prototypia Viewer Tester --
local test_dir = "/Test/test.ar"

-- Defold APIs
local hash = hash
local msg_url = msg.url
local sys_load_buffer = sys.load_buffer
local factory_create = factory.create
local vmath_vector3 = vmath.vector3
local vmath_vector4 = vmath.vector4
local msg_post = msg.post
local go_delete = go.delete
local go_set = go.set
local ipairs = ipairs
local collectgarbage = collectgarbage

-- libArf2
local Arf2 = Arf2
local NewTable = Arf2.NewTable
local InitArf = Arf2.InitArf
local UpdateArf = Arf2.UpdateArf
local FinalArf = Arf2.FinalArf

-- World
local Ar = hash("Ar")
local ViewerBase = hash("/ViewerBase")
local Sprite = hash("Sprite")
local Wishfactory, Hintfactory, Animfactory
local disable = hash("disable")
local enable = hash("enable")
local tint_w = hash("tint.w")
local tint = hash("tint")

-- Fumen Data
local Arf2Buf
local before
local wgos, hgos, agos_l, agos_r
local w_sprites, h_sprites, a_sprites_l, a_sprites_r
local wtint, htint, atint

function init(self)
	Wishfactory = msg_url( Ar, ViewerBase, hash("Wishfactory") )
	Hintfactory = msg_url( Ar, ViewerBase, hash("Hintfactory") )
	Animfactory = msg_url( Ar, ViewerBase, hash("Animfactory") )
	
	Arf2Buf = sys_load_buffer(test_dir)
	local b, t, w, h = InitArf(Arf2Buf, true)
	before = b

	-- Create Tables
	wgos, hgos, agos_l, agos_r = NewTable(w, 0), NewTable(h, 0), NewTable(h, 0), NewTable(h, 0)
	w_sprites, h_sprites, a_sprites_l, a_sprites_r = NewTable(w, 0), NewTable(h, 0), NewTable(h, 0), NewTable(h, 0)
	wtint, htint, atint = NewTable(w, 0), NewTable(h, 0), NewTable(h, 0)

	-- Fill Tables
	for i = 1, w do
		local W = factory_create(Wishfactory)
		wgos[i], w_sprites[i] = W, msg_url(Ar, W, Sprite)
		msg_post(W, disable)
	end

	for i = 1, h do
		local H = factory_create(Hintfactory)
		hgos[i], h_sprites[i] = H, msg_url(Ar, H, Sprite)
		htint[i] = vmath_vector4()
		msg_post(H, disable)

		local AL = factory_create(Animfactory)
		local AR = factory_create(Animfactory)
		agos_l[i], agos_r[i] = AL, AR
		a_sprites_l[i], a_sprites_r[i] = msg_url(Ar, AL, Sprite), msg_url(Ar, AR, Sprite)
		atint[i] = vmath_vector4()
		msg_post(AL, disable)
		msg_post(AR, disable)
	end

end


local last_wgo_used = 0
local last_hgo_used = 0
local last_ago_used = 0
local test_ms = 0
function update(self, dt)

	-- C++ Updating
	test_ms = test_ms + dt*1000
	if test_ms >= before then go_delete() end
	local hint_lost, wgo_used, hgo_used, ago_used = UpdateArf(test_ms, wgos, hgos, agos_l, agos_r, wtint, htint, atint)
	print(hint_lost, wgo_used, hgo_used, ago_used)

	-- Mutate tint
	for i = 1, wgo_used do
		local wsi = w_sprites[i]
		if wsi then go_set(wsi, tint_w, wtint[i]) end
	end
	for i = 1, hgo_used do
		local hsi = h_sprites[i]
		if hsi then go_set(hsi, tint, htint[i]) end
	end
	for i = 1, ago_used do
		local alsi = a_sprites_l[i]
		if alsi then
			go_set(alsi, tint, atint[i])
			go_set(a_sprites_r[i], tint, atint[i])
		end
	end

	-- Enables & Disables
	if wgo_used > last_wgo_used then
		for i = last_wgo_used+1, wgo_used do
			local wsi = w_sprites[i]
			if wsi then msg_post(wsi, enable) end
		end
	elseif wgo_used < last_wgo_used then
		for i = wgo_used+1, last_wgo_used do
			local wsi = w_sprites[i]
			if wsi then msg_post(wsi, disable) end
		end
	end
	last_wgo_used = wgo_used

	if hgo_used > last_hgo_used then
		for i = last_hgo_used+1, hgo_used do
			local hsi = h_sprites[i]
			if hsi then msg_post(hsi, enable) end
		end
	elseif hgo_used < last_hgo_used then
		for i = hgo_used+1, last_hgo_used do
			local hsi = h_sprites[i]
			if hsi then msg_post(hsi, disable) end
		end
	end
	last_hgo_used = hgo_used

	if ago_used > last_ago_used then
		for i = last_ago_used+1, ago_used do
			local asli = a_sprites_l[i]
			if asli then
				msg_post(asli, enable)
				msg_post(a_sprites_r[i], enable)
			end
		end
	elseif ago_used < last_ago_used then
		for i = ago_used+1, last_ago_used do
			local asli = a_sprites_l[i]
			if asli then
				msg_post(asli, disable)
				msg_post(a_sprites_r[i], disable)
			end
		end
	end
	last_ago_used = ago_used

end

function final(self)
	FinalArf()

	for i = 1, #wgos do
		go_delete(wgos[i])
	end

	for i = 1, #hgos do
		go_delete(hgos[i])
		go_delete(agos_l[i])
		go_delete(agos_r[i])
	end

	wgos, hgos, agos_l, agos_r = nil, nil, nil, nil
	w_sprites, h_sprites, a_sprites_l, a_sprites_r = nil, nil, nil, nil
	wtint, htint, atint = nil, nil, nil, nil

	collectgarbage()
end