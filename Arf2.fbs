// Arf2 Encoded Format with FlatBuffers Schema Syntax
// (c) 2024- 1dealGas, under the MIT License.


// 0. Usage
// flatc --cpp --no-cpp-direct-copy --gen-mutable Arf2.fbs
// flatc --python Arf2.fbs


// 1. EaseType       ESIN: Sin (ratio * π/2)       ECOS: 1 - Cos (ratio * π/2)
//    |       | 0      | 1      | 2      | 3                                 |
//    |:-----:|:------:|:------:|:------:|:--------------------------------: |
//    | PosX  | Linear |  ESIN  |  ECOS  | InQuad if sgn >= 0 , OutQuad else |
//    | PosY  | Linear |  ECOS  |  ESIN  | InQuad if sgn >= 0 , OutQuad else |
//    | Angle | Stasis | Linear | InQuad |              OutQuad              |


// 2. DTime System
//    Ratio = BPM * Scale / 15000;   Ratio = dx/d(mstime) or dy/d(mstime).
//    Range of DBPM(BPM*Scale): [-2400, -0.15]&[0.15, 2400].
//    Flashback: Ratio will be ratio_x105/(-100000.f) if base_x105[i]>base_x105[i+1].


// 3. Compressible Structs (High->Low)
//    A. DeltaNode
//       (14) ratio_x105:int        ratio * (10^5)
//       (18) half_init_ms:int      init_ms * 0.5
//       (32) half_base_x105:int    base * (10^5) * 0.5
//    B. AngleNode
//       (12) degree:int            [-1800,1800] + 1800.
//       (2)  easetype:int
//       (18) halfms:int            [0,512000] Originally, Precision: 2ms
//    C. PosNode
//       (9)  curve_init:float      [0,1] Originally, Precision: 1/511
//       (9)  curve_end:float       [0,1] Originally, Precision: 1/511
//       (2)  easetype:int
//       (13) x:float               [-16,32]  +  16 , Precision: 1/128
//       (12) y:float               [-8,16]   +  8  , Precision: 1/128
//       (19) ms:int                [0,512000]
//    D. WishGroup Info
//       (10) child_prg:int
//       (8)  node_prg:int
//       (1)  layer:int             0 -> Layer1   or   1 -> Layer2
//       (13) max_vsbdist:float     [0,8) Originally, Precision: 1/1024
//    E. Hint
//       (1)  TAG:int                            Runtime Only
//       (19) judged_ms:int         [0,512000]   Runtime Only
//       (19) ms:int                [0,512000]
//       (12) y:float                            Same with y of PosNode
//       (13) x:float                            Same with x of PosNode


// 4. Incompressible Structs
table WishChild {
	p:uint8 = 255;     //                        Runtime Only
	dt:uint32;         // DTime * (10^5) * 0.5
	anodes:[uint32];   // AngleNodes
}

table WishGroup {
	info:uint32 = 4294967295;   // WishGroup Info
	nodes:[uint64];   // PosNodes
	childs:[WishChild];   // WishChilds
}

table Arf2Index {
	widx:[uint16];
	hidx:[uint16];
}


// 5. Root Type
table Arf2 {

	// Info
	before:uint32;
	dts_layer1:[uint64];
	dts_layer2:[uint64];
	index:[Arf2Index];

	// WishGroups
	wish:[WishGroup];
	wgo_required:uint8;

	// Hints
	hint:[uint64];
	hgo_required:uint8;
	special_hint:uint16;

}   // New object type(s) coming in future.
root_type Arf2;


// 6. Limits.
//    A. Length < 512000ms
//    B. WishChild: Max 255    AngleNodes for each
//    C. WishGroup: Max 1023   WishChilds  &  255    PosNodes for each
//    D. Arf2:      Max 65535  WishGroups  &  65535  Hints for each chart(fumen),
//                  Max 255    WishGroups  &  255    Hints for each frame.
//    E. (Recommended)  Interval(ms) between PosNodes(or AngleNodes) < 8193ms